generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int        @id @default(autoincrement())
  username           String?    @unique
  email              String     @unique
  passwordHash       String?    @map("password_hash")
  role               Role       @default(ADMIN)
  isActive           Boolean    @default(true) @map("is_active")
  mustChangePassword Boolean    @default(false) @map("must_change_password")
  lastLogin          DateTime?  @map("last_login")
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @default(now()) @updatedAt @map("updated_at")
  auditLogs          AuditLog[]

  @@index([email])
  @@index([isActive])
  @@index([lastLogin])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Faculty {
  id          Int          @id @default(autoincrement())
  name        String
  code        String       @unique
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  departments Department[]
  students    Student[]

  @@index([name])
  @@index([code])
  @@index([createdAt])
  @@map("faculties")
}

model Department {
  id          Int       @id @default(autoincrement())
  name        String
  code        String    @unique
  description String?
  facultyId   Int       @map("faculty_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  faculty     Faculty   @relation(fields: [facultyId], references: [id])
  students    Student[]

  @@index([facultyId])
  @@index([name])
  @@index([code])
  @@index([createdAt])
  @@map("departments")
}

model AcademicYear {
  id           Int       @id @default(autoincrement())
  academicYear String    @unique @map("academic_year")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  students     Student[]

  @@index([isActive])
  @@index([createdAt])
  @@map("academic_years")
}

model Student {
  id             Int          @id @default(autoincrement())
  registrationId String       @unique @map("registration_id")
  certificateId  String?      @unique @map("certificate_id")
  fullName       String       @map("full_name")
  gender         Gender?
  phone          String?
  departmentId   Int          @map("department_id")
  facultyId      Int          @map("faculty_id")
  academicYearId Int          @map("academic_year_id")
  gpa            Decimal?     @db.Decimal(3, 2)
  grade          String?
  graduationDate DateTime?    @map("graduation_date")
  status         Status       @default(UN_CLEARED)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  documents      Document[]
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  department     Department   @relation(fields: [departmentId], references: [id])
  faculty        Faculty      @relation(fields: [facultyId], references: [id])

  @@index([departmentId])
  @@index([facultyId])
  @@index([academicYearId])
  @@index([status])
  @@index([gpa])
  @@index([createdAt])
  @@index([graduationDate])
  @@index([certificateId])
  @@index([departmentId, status])
  @@index([academicYearId, status])
  @@index([fullName])
  @@index([gender])
  @@index([updatedAt])
  @@index([registrationId])
  @@index([facultyId, status])
  @@index([departmentId, facultyId])
  @@index([createdAt, status])
  @@map("students")
}

model Document {
  id             Int      @id @default(autoincrement())
  registrationId Int      @map("registration_id")
  documentType   String   @map("document_type")
  fileName       String   @map("file_name")
  fileSize       Int?     @map("file_size")
  fileType       String?  @map("file_type")
  fileUrl        String   @map("file_url")
  uploadDate     DateTime @default(now()) @map("upload_date")
  createdAt      DateTime @default(now()) @map("created_at")
  student        Student  @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([registrationId])
  @@index([documentType])
  @@index([uploadDate])
  @@index([createdAt])
  @@index([registrationId, documentType])
  @@map("documents")
}

model AuditLog {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  action       String
  resourceType String?  @map("resource_type")
  resourceId   Int?     @map("resource_id")
  details      String?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  timestamp    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resourceType])
  @@index([resourceId])
  @@index([timestamp])
  @@index([userId, action])
  @@index([action, timestamp])
  @@index([resourceType, resourceId])
  @@index([timestamp, action])
  @@index([userId, timestamp])
  @@map("audit_logs")
}

enum Role {
  SUPER_ADMIN
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  CLEARED
  UN_CLEARED
}

enum DocumentType {
  PHOTO
  TRANSCRIPT
  CERTIFICATE
  SUPPORTING
}
